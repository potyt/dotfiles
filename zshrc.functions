
function extract () {
    if [[ -f "$1" ]]; then
        case "$1" in
            *.tbz2 | *.tar.bz2) tar -xvjf  "$1"     ;;
            *.txz | *.tar.xz)   tar -xvJf  "$1"     ;;
            *.tgz | *.tar.gz)   tar -xvzf  "$1"     ;;
            *.tar | *.cbt)      tar -xvf   "$1"     ;;
            *.zip | *.cbz)      unzip      "$1"     ;;
            *.rar | *.cbr)      unrar x    "$1"     ;;
            *.arj)              unarj x    "$1"     ;;
            *.ace)              unace x    "$1"     ;;
            *.bz2)              bunzip2    "$1"     ;;
            *.xz)               unxz       "$1"     ;;
            *.gz)               gunzip     "$1"     ;;
            *.7z)               7z x       "$1"     ;;
            *.Z)                uncompress "$1"     ;;
            *.gpg)       gpg2 -d "$1" | tar -xvzf - ;;
            *) echo "Error: failed to extract $1" ;;
        esac
    else
        echo "Error: $1 is not a valid file for extraction"
    fi
}

function gp2d() {
    gprof2dot -f pstats $1 | dot -Tpng -o $2
}

function auto-switch-node-version() {
    NVMRC_PATH=$(nvm_find_nvmrc)
    CUR_VERSION=$(nvm version)

    if [[ ! -z "$NVMRC_PATH" ]]; then
        REQ_VERSION=$(cat $NVMRC_PATH)
        LOC_VERSION=$(nvm_match_version $REQ_VERSION)

        if [[ ! -z "$LOC_VERSION" && $LOC_VERSION != "N/A" ]]; then

            unset AUTOSWITCH_NODE_SUPPRESS_WARN

            if [[ $CUR_VERSION != $LOC_VERSION ]]; then
                nvm use $REQ_VERSION
            fi
        else
            if [[ $AUTOSWITCH_NODE_SUPPRESS_WARN == $NVMRC_PATH ]]; then
                return
            fi

            REL_NVMRC_PATH="$(realpath --relative-to=$(pwd) $NVMRC_PATH 2> /dev/null || echo $NVMRC_PATH)"

            echo ""
            echo "WARNING"
            echo "  Found file: $REL_NVMRC_PATH"
            echo "  specifying: $REQ_VERSION"
            echo "  ...but no installed Node version satisfies this."
            echo "  "
            echo "  Current node version: $CUR_VERSION"
            echo "  "
            echo "  You might want to run \"nvm install\""

            export AUTOSWITCH_NODE_SUPPRESS_WARN=$NVMRC_PATH
        fi
    else
        unset AUTOSWITCH_NODE_SUPPRESS_WARN

        if [[ $CUR_VERSION != $(nvm version default)  ]]; then
            nvm use default
        fi
    fi
}
